generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// references tables
model investor_types {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model investor_statuses {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model genders {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model relationships {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?
  investor_heirs investor_heirs[]
}

model risk_levels {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model address_types {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  deleted_at         DateTime?
  investor_addresses investor_addresses[]
}

model religions {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model transaction_types {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model transaction_statuses {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model educations {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model card_types {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model incomes {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model income_sources {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model maritals {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model nationalities {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model jobs {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model job_categories {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model job_roles {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  investors  investors[]
}

model agent_types {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  agents     agents[]
}

model agent_levels {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  agents     agents[]
}

model banks {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  code         String         @unique
  logo         String?
  is_active    Boolean
  bi_code      String?
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  deleted_at   DateTime?
  bank_branchs bank_branchs[]
}

model bank_branchs {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  bank_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  bank banks @relation(fields: [bank_id], references: [id])
}

model holidays {
  id         Int       @id @default(autoincrement())
  name       String
  date       DateTime  @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model fund_types {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  risk_point Int
  icon       String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  funds      funds[]
}

model funds {
  id             Int     @id @default(autoincrement())
  name           String
  ksei_code      String?
  code           String  @unique
  color          String?
  bank_id        Int
  bank_branch_id Int
  account_number String
  account_name   String

  launched_at DateTime

  max_red_percentage    Float
  max_switch_percentage Float
  max_unit_issued       Float?

  min_red Float

  can_switch_to      String //all,same_custody,specific_funds
  can_switch_to_list String @db.Text

  fee_sub   Float
  fee_red   Float
  fee_swin  Float
  fee_swout Float

  is_active Boolean
  is_public Boolean
  is_syaria Boolean

  desc     String @db.Text
  policy   String @db.Text
  strategy String @db.Text
  goals    String @db.Text

  can_redeem    Boolean
  can_subscript Boolean
  can_switch    Boolean
  fund_type_id  Int

  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime?
  fund_type        fund_types         @relation(fields: [fund_type_id], references: [id])
  fund_allocations fund_allocations[]
}

model fund_allocations {
  id         Int       @id @default(autoincrement())
  fund_id    Int
  allocation Float
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  fund funds @relation(fields: [fund_id], references: [id])
}

model agents {
  id              Int         @id @default(autoincrement())
  agent_level_id  Int
  agent_type_id   Int
  agent_parent_id Int?
  code            String      @unique
  first_name      String
  middle_name     String?
  last_name       String
  email           String      @unique
  phone_number    String
  is_active       Boolean
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
  deleted_at      DateTime?
  investors       investors[]

  agent_level  agent_levels @relation(fields: [agent_level_id], references: [id])
  agent_type   agent_types  @relation(fields: [agent_type_id], references: [id])
  agent_parent agents?      @relation("agent_parent", fields: [agent_parent_id], references: [id])
  agent_child  agents[]     @relation("agent_parent")
}

model investors {
  id                 String   @id @default(uuid())
  first_name         String   @db.VarChar(128)
  middle_name        String?  @db.VarChar(128)
  last_name          String   @db.VarChar(128)
  email              String   @unique
  phone_number       String?  @db.VarChar(32)
  risk_level_id      Int?
  risk_point         Int?
  sid                String?  @unique
  birth_date         DateTime
  birth_place        String
  investor_status_id Int
  is_employee        Boolean
  agent_id           Int
  investor_type_id   Int

  tax_number         String
  tax_effective_date DateTime
  gender_id          Int
  education_id       Int
  card_type_id       Int
  card_number        String
  income_id          Int
  income_source_id   Int
  marital_id         Int
  nationality_id     Int
  job_id             Int
  job_category_id    Int
  job_role_id        Int

  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  deleted_at         DateTime?
  investor_addresses investor_addresses[]
  investor_heirs     investor_heirs[]
  sales              agents               @relation(fields: [agent_id], references: [id])
  income             incomes              @relation(fields: [income_id], references: [id])
  income_source      income_sources       @relation(fields: [income_source_id], references: [id])
  marital            maritals             @relation(fields: [marital_id], references: [id])
  nationality        nationalities        @relation(fields: [nationality_id], references: [id])
  job                jobs                 @relation(fields: [job_id], references: [id])
  job_category       job_categories       @relation(fields: [job_category_id], references: [id])
  job_role           job_roles            @relation(fields: [job_role_id], references: [id])
  investor_type      investor_types       @relation(fields: [investor_type_id], references: [id])
  investor_status    investor_statuses    @relation(fields: [investor_status_id], references: [id])
  gender             genders              @relation(fields: [gender_id], references: [id])
  education          educations           @relation(fields: [education_id], references: [id])
  card_type          card_types           @relation(fields: [card_type_id], references: [id])
  risk_level         risk_levels?         @relation(fields: [risk_level_id], references: [id])
}

model investor_heirs {
  id          Int       @id @default(autoincrement())
  investor_id String    @unique
  name        String
  relation_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  investor investors     @relation(fields: [investor_id], references: [id])
  relation relationships @relation(fields: [relation_id], references: [id])
}

model investor_addresses {
  id              Int       @id @default(autoincrement())
  address_type_id Int
  investor_id     String
  province_id     String
  city_id         String
  district_id     String
  subdistrict_id  String
  postal_code     String
  address         String
  address_line_2  String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  investor     investors     @relation(fields: [investor_id], references: [id])
  address_type address_types @relation(fields: [address_type_id], references: [id])
}

model users {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(128)
  username   String       @unique
  password   String       @db.VarChar(128)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?
  user_roles user_roles[]
}

model user_roles {
  id         Int       @id @default(autoincrement())
  user_id    Int
  role_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user users @relation(fields: [user_id], references: [id])
  role roles @relation(fields: [role_id], references: [id])
}

model roles {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime?
  user_roles       user_roles[]
  role_permissions role_permissions[]
}

model permissions {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime?
  role_permissions role_permissions[]
}

model role_permissions {
  id            Int       @id @default(autoincrement())
  role_id       Int
  permission_id Int
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  permission permissions @relation(fields: [permission_id], references: [id])
  role       roles       @relation(fields: [role_id], references: [id])

  @@unique([permission_id, role_id])
}
